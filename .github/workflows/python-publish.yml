# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow uploads a Python Package to PyPI when a release is created
name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # Required for trusted publishing

jobs:
  release-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # Step 3: Install build tool and build the package
      - name: Build release distributions
        run: |
          python -m pip install --upgrade pip
          python -m pip install build
          python -m build

      # Step 4: Upload build artifacts
      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists-${{ matrix.os }}
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: release-build
    environment:
      name: pypi
      url: https://pypi.org/project/mvent  # Replace with your PyPI project URL

    steps:
      # Step 5: Download the built distributions
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists-ubuntu-latest  # Use the Ubuntu build for publishing
          path: dist/

      # Step 6: Publish to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          username: __token__
          password: ${{ secrets.PYPI_PASSWORD }}

